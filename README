 ____                      
|  _ \  __ ___   _____  
| | | |/ _` \ \ / / _ \ 
| |_| | (_| |\ V /  __/
|____/ \__,_| \_/ \___|
Anonymised peer-to-peer distributed hash table on proof-of-work and gossip.

Copyright 2024 Joey Innes <joey@inneslabs.uk>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


Dave is an open protocol, designed to simply & efficiently distribute a hash
table in a byzantine environment. A peer-to-peer cache, anonymised, and
almost instantly-consistent. Clients (webapps included, via HTTP gateway),
may write to the network without any token or key, providing only a classic
hashcash style proof-of-work. Packets with fields value, time, and a time-
bound proof-of-work (nonce, work) are gossiped, until their weight has decayed
such that they are no-longer available on any node.


1.      Constants

MTU             1500            Reasonable value to avoid packet
                                fragmentation.
NPEER           2               Limit to prevent Eclipse attack.
EPOCH           26544358ns      Base minimum period of the operation cycle.
DELAY           512             Epochs until dats are shared to new peers.
SHARE           8               Epochs until silent peers are no-longer
                                advertised.
PING            64              Epochs until silent peers are pinged. 
DROP            512             Epochs until silent peers are dropped from the
                                peer table.
PRUNE           128             Number of epochs between dat pruning.
SEEDSEED        1024            For seed nodes. Number of epochs between
                                sending a random dat. Seed nodes must already
                                send many PEER messages, but also help to
                                seed.


2.      User-configurable Settings

                SUGGESTED VALUE
FILTER_CAP      1M      Allocates around 1MB. Should be increased to 2, 4 or
                        8M if possible.
DAT_CAP         1M      As large as possible for available memory. ~1304B per
                        dat.


3.      Operation Codes

GETPEER         Packet requesting that the remote replies with NPEER random
                peer descriptors.
PEER            Packet containing NPEER peer descriptors.
DAT             Packet containing a value, time, and output of the
                cost function: work, nonce.


4.      Types

4. 1.   M
dave.M is the binary serialisation of an entire packet.

                DESCRIPTION                         BYTE LENGTH
Op              Operation code.                     1
Peers           List of peers.                      20*NPEER
Work            SHA256(SHA256(Val, Time), Salt).    0 | 32
Salt            Random bytes used to solve work.    0 | 32
Time            Approximate time. Packets with a    0 | 8
                future time are dropped.
Val             The data.                           0 | <= 1388 when
                                                    NPEER=2


4. 2.   Dat
godave.Dat is a container for Value, Time, Salt, and Work.

The proof of work allows the network to prioritise storage of newer keys
backed by more work. See 6.


4. 3.   Wire Format

A message is serialized into binary using protobuf. See protobuf spec
dave.proto.

Transpiling Protobuf Spec for Go:
#!/bin/bash
protoc --go_out=. dave.proto


5.      Peer Discovery & Liveness

The protocol ensures a cohesive network by combining liveness and peer
discovery into a single pair of direct messages (GETPEER & PEER). A node
replies to a GETPEER message with a PEER message with up to NPEER peer
descriptors. Peers are not advertised if they have not been seen recently.



6.      Weight

weight = difficulty * (1 / ageMilliseconds)

Where difficulty is number of leading zero bytes, age is calculated from the
given time and current time.


7.      Replacement by Weight

Once per PRUNE epochs, a user defined number of heaviest dats persisted,
and the remaining are dropped.


8.      Send One Random Dat

Every EPOCH, each node sends one random dat to one random peer. This
ensures reliable distribution and sender anonymitiy.

Propagating dats in this way ensures that an adversary is unable to
create a timing-attack to discern the source of a dat, even with a broad
view of network traffic.


9.      Packet Filter

Dropping packets efficiently is fundamental to resilience against DoS attack.

Cuckoo filters leverage cuckoo hashing to efficiently store fingerprints in a
compact hash table, enabling fast insertions, deletions and lookups. This
makes them well-suited for performance-critical applications like packet
filtering to improve DoS attack resilience.

Packets that deviate from the protocol are detected & dropped without
further processing.

The key inserted uniquely into the cuckoo filter:
        
FNV128A(REMOTE_IP, HASH4(PORT), OP_CODE)

Failing unique insertion, the packet is dropped.

The cuckoo filter is reset every epoch, therefore each OP_CODE may be sent
once per IP-PORT per epoch. The number of ports allowed per IP address is
limited using a 4-bit multiply-then-shift hash function.


10.      Usage of daved
This repository contains three go modules. First, godave is the protocol
implementation in library form. Second, daved is a command-line application,
it makes the library executable as a node. daved also allows basic interaction
with the network directly.

When daved is started without arguments, the default mode of operation is as a
node, participating in the network. It will listen for dats, as they are
gossipped randomly through the network, relaying them as in the protocol spec.

When running multiple instances of daved on one ip-address, random ports will
often cause packet filter collisions. I suggest using pre-defined ports in
this case.

Arguments, followed by default values:
-l [::]:0               Listen ip address and port (listen on every interface,
                        on a random available port)
-b :1992                Bootstrap to port (local machine inferred)
-b 3.255.246.69:1618    Bootstrap to ip:port
-s                      Start as seed node. Off by default.
-dcap 500000            Capacity of dat map held in memory.
-fcap 1000000           Capacity of cuckoo filter.
-v                      Verbose logging, grep by log path prefix.
-d 2                    For set command. Difficulty of poof-of-work.
-h                      For set command. Output only hash.

Try:
daved
daved -v | grep /d/pr

Or:
daved set hello_dave
A hash will be returned after the work & broadcast, with default difficulty.

daved get <HASH>

