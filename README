 ____                      
|  _ \  __ ___   _____  
| | | |/ _` \ \ / / _ \ 
| |_| | (_| |\ V /  __/
|____/ \__,_| \_/ \___|

Peer-to-peer store on proof-of-work and gossip over UDP.

Copyright 2024 Joey Innes <joey@inneslabs.uk>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

WARNING: THIS PROJECT HAS JUST STARTED, AND IS NOT FIT FOR PRODUCTION

1.      Constants
PERIOD              127713920ns     Good for now.
LEN_PACKET          1500            Typical MTU.
LEN_VAL             1240            Gives margin for peer descriptors.
NPEER               3               Limit to prevent Eclipse attack.
TOLERANCE           2               Low tolerance reduces message loss.
DROP                5               Second tolerance stage to drop peers. Dropped peers are re-added if too low.
DISTANCE            6               Higher value increases probability that all nodes receive packet.
FANOUT_GETDAT       2               2 is good. Prefer increasing DISTANCE to benefit from DAT propagation via GETDAT.
FANOUT_SETDAT       2               2 is good. Prefer increasing DISTANCE to add redundancy.
SEND_FACTOR         2               Initial sender multiplies FANOUT by SEND_FACTOR to increase redundancy.
MINWORK_FANOUT      2               Prevent DAT spam.

2.      Operation Codes
GETPEER     Packet requesting that the remote replies with NPEER random peer descriptors.
PEER        Packet containing NPEER peer descriptors.
SETDAT      Packet containing DAT, remote should verify work, and then store. If len(Peers) < DISTANCE, remote should forward to FANOUT_SETDAT random peers, after appending source address:port to Peers.
GETDAT      Packet requesting DAT, remote should send DAT to all peer descriptors contained in packet.
DAT, without forwarding, else if len(Peers) < DISTANCE, forward to FANOUT_GETDAT random peers.


3.      Message Wire Format
A message is serialized into binary using protobuf. See dave.proto for the protobuf spec.

3. 1.   Fields
            DESCRIPTION                                 BYTE_LEN
Op          Operation code.                             1
Peers       List of peer descriptors who forwarded.     UNKNOWN
Prev        Work of previous DAT.                       0 | 32
Work        SHA256(SHA256(Prev, Val, Tag), Nonce).      0 | 32
Nonce       Salt to compute work.                       0 | 32
Val         The data                                    <= LEN_VAL
Tag         Arbitrary metaadata.                        <= 32

3. 2.   Transpiling Protobuf Spec for Go
#!/bin/bash
protoc --go_out=. dave.proto


4.      Peer Discovery & Liveness
The protocol ensures a cohesive network by combining ping and peer discovery into a single pair of messages (GETPEER & PEER).
A node replies to a GETPEER message with a PEER message with up to NPEER random address:port strings, where each address:port is a responsive peer (ping and drop counters are zero).
When a GETPEER message is sent, the ping counter (peer.nping) is incremented.
If a PEER message is received from the address, both ping and drop counters are set to zero.
If the ping counter reaches TOLERANCE, the drop counter is incremented.
If the drop counter reaches DROP*TOLERANCE, the peer is deleted from the peer table.
This 2-stage mechanism ensures that dropped peers are not immediately re-added, because unresponsive peers are not advertised.


5.      DAT
DAT is a construct representing a small value, some metadata (time & tag), and the proof of work. The proof-of-work allows the network to prioritise storage of keys backed by more work.
The proof of work also makes it easier to protect the network from protocol deviation.


6.      Message Propagation
The network propagates SETDAT and GETDAT messages.
Each node appends the address:port of the message sender to the message address list.
For the SETDAT operation, the message is forwarded to up to FANOUT_SETDAT (2) random addresses, excluding those in the message address list.
For the GETDAT operation, if the receiver DOES NOT have the data, and the message contains less than DISTANCE addresses, the message is forwarded to up to FANOUT_GETDAT (2) random peers, excluding those in the message address list.
For the GETDAT operation, if the receiver DOES have the data, the receiver sends a DAT message with the data to all addresses in the message address list. Each peer can then validate the work & store the DAT.

7.      Resources
[1] https://en.wikipedia.org/wiki/Gossip_protocol
[2] https://www.linkedin.com/advice/1/how-do-you-tune-parameters-optimize-performance
[3] https://www.cs.cornell.edu/projects/Quicksilver/public_pdfs/2007PromiseAndLimitations.pdf
[4] https://www.prismmodelchecker.org/casestudies/gossip.php
[5] https://www.linkedin.com/advice/1/how-do-you-implement-gossip-protocol-peer-to-peer
[6] https://highscalability.com/gossip-protocol-explained/
[7] https://www.inesc-id.pt/ficheiros/publicacoes/8356.pdf
[8] https://www.inf.usi.ch/faculty/pedone/Paper/2021/middleware2021b.pdf
[9] https://jisajournal.springeropen.com/articles/10.1186/1869-0238-4-14
[10] https://www.linkedin.com/advice/3/how-do-you-evaluate-performance-reliability-6c
[11] https://www.geeksforgeeks.org/the-gossip-protocol-in-cloud-computing/
[12] https://asc.di.fct.unl.pt/~jleitao/pdf/p2p-book-1.pdf
[13] https://d-central.tech/understanding-how-gossip-protocols-enhance-bitcoin-mining-efficiencyunderstanding-how-gossip-protocols-work-for-bitcoin-mining/
[14] https://docs.iza.org/dp9704.pdf
[15] https://hyperledger-fabric.readthedocs.io/en/release-2.2/orderer/ordering_service.html
[16] https://ethereum.stackexchange.com/questions/108008/which-node-does-your-transaction-get-sent-to-first-for-validation-and-broadcast
[17] https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md
[18] https://acropolis.aueb.gr/~spyros/www/papers/Gossip-based%20Peer%20Sampling.pdf
[19] https://github.com/ethereum/portal-network-specs/blob/master/transaction-gossip.md

8.      In Development
The protocol & daved are still far from finished.

I'm also currently writing a HTTP gatetway, daveg, to serve as a proof of concept, and to quickly find and address usability issues. We can soon build our first web dApp. https://github.com/intob/daveg
